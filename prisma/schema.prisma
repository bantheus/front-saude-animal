generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Especie {
  id   String @id @default(cuid())
  nome String
  slug String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  animal Animal[]

  @@index(fields: [nome])
}

model Animal {
  id        String  @id @default(cuid())
  nome      String
  slug      String
  especie   Especie @relation(fields: [especieId], references: [id], onUpdate: Cascade)
  especieId String
  sexo      Sexo
  peso      Float
  foto      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  consulta     Consulta[]
  vacina       Vacina[]
  procedimento Procedimento[]

  @@index(fields: [nome])
  @@index(fields: [sexo])
}

model Consulta {
  id        String   @id @default(cuid())
  data      DateTime
  hora      DateTime
  titulo    String
  slug      String
  descricao String

  animal   Animal @relation(fields: [animalId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  animalId String

  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [data])
  @@index(fields: [titulo])
}

model Vacina {
  id        String   @id @default(cuid())
  nome      String
  slug      String
  descricao String
  data      DateTime

  animal   Animal @relation(fields: [animalId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  animalId String

  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [data])
  @@index(fields: [nome])
}

model Procedimento {
  id        String   @id @default(cuid())
  data      DateTime
  titulo    String
  slug      String
  descricao String

  animal   Animal @relation(fields: [animalId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  animalId String

  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [data])
  @@index(fields: [titulo])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  procedimento Procedimento[]
  vacina       Vacina[]
  consulta     Consulta[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Sexo {
  MACHO
  FEMEA
}
